
<!--pattern节点定义的输出模式解释-->
<!--        %d{HH:mm:ss.SSS}  当前时间；-->
<!--        [%thread]  [当前线程名称]-->
<!--        %-5level  logger级别-->
<!--        %logger{36} logger名称-->
<!--        -%msg%n  定义的输出-->
<!--        %line  输出日志的行号-->
<!--        %n  换行-->
<!--        %date和%d{yyyy-MM-dd HH:mm:ss.SSS}  当前时间包含年月日-->
<!--        {%C.java:%L}  输出日志所在的java类、所在行及路径可以替换[%thread]-->

<configuration>
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
  <!--可以取 yml文件中的值-->
    <springProperty scope="context" name="logPath" source="logging.file.path" defaultValue="logs"/>
    <property name="LOG_HOME" value="${logPath}/${AMP_PRO_CODE}/${AMP_APP_CODE}/${INSTANCE_CODE}"/>
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
<!--    也可以针对 debug，info,warn,error 分文件存储 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/application.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/application.%d{yyyy-MM-dd}.log.%i.gz</fileNamePattern>
            <maxFileSize>1GB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>3GB</totalSizeCap>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder" charset="UTF-8">
            <pattern>[%-5p] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] [%c] %line{}$$ [%X{tid}] - %m%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="FILE"/>
    </appender>
    <!--输出到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>info</level>
        </filter>
        <encoder>
<!--            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>-->
<!--            也可以用下面-->
            <pattern>%date [%thread] [%level] %logger{15} - %message%n%xException{10}</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>


<!--指定使用哪些 appender 日志记录器节点，level设置后只有等于高于level 的日志才会打印-->
    <root level="trace">
        <appender-ref ref="ASYNC_FILE"/>
        <!--用于IDE控制台输出-->
        <appender-ref ref="CONSOLE"/>
    </root>

<!--    MDC.put("tid", Thread.currentThread().getId());-->

</configuration>